type ItemJump = [sizeDiff: number, index: number];
export type ScrollJump = Readonly<ItemJump[]>;
export type ItemResize = [index: number, size: number];
type ItemsRange = [startIndex: number, endIndex: number];
export declare const SCROLL_STOP = 0;
export declare const SCROLL_DOWN = 1;
export declare const SCROLL_UP = 2;
export declare const SCROLL_MANUAL = 3;
type ScrollDirection = typeof SCROLL_STOP | typeof SCROLL_DOWN | typeof SCROLL_UP | typeof SCROLL_MANUAL;
export declare const ACTION_ITEM_RESIZE = 1;
export declare const ACTION_WINDOW_RESIZE = 2;
export declare const ACTION_SCROLL = 3;
export declare const ACTION_MANUAL_SCROLL = 4;
type Actions = [type: typeof ACTION_ITEM_RESIZE, entries: ItemResize[]] | [type: typeof ACTION_WINDOW_RESIZE, size: number] | [type: typeof ACTION_SCROLL, offset: number] | [type: typeof ACTION_MANUAL_SCROLL, offset: number];
export type VirtualStore = {
    _getRange(): ItemsRange;
    _isUnmeasuredItem(index: number): boolean;
    _hasUnmeasuredItemsInRange(startIndex: number): boolean;
    _getItemOffset(index: number): number;
    _getItemSize(index: number): number;
    _getScrollOffset(): number;
    _getViewportSize(): number;
    _getScrollSize(): number;
    _getJump(): ScrollJump;
    _isHorizontal(): boolean;
    _isRtl(): boolean;
    _getItemIndexForScrollTo(offset: number): number;
    _waitForScrollDestinationItemsMeasured(): Promise<void>;
    _subscribe(cb: () => void): () => void;
    _update(...action: Actions): void;
    _getScrollDirection(): ScrollDirection;
    _setScrollDirection(direction: ScrollDirection): void;
    _updateCacheLength(length: number): void;
};
export declare const createVirtualStore: (itemCount: number, itemSize: number, isHorizontal: boolean, isRtl: boolean, initialItemCount: number | undefined, onScrollStateChange: (scrolling: boolean) => void, onScrollOffsetChange: (offset: number) => void) => VirtualStore;
export {};
